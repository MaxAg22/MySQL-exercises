-- 1) Listar las 7 propiedades con la mayor cantidad de reviews en el año 2024

SELECT p.name AS propertyName, count(*) AS total_reviews
FROM properties AS p
INNER JOIN reviews AS r
    ON p.id = r.property_id 
    WHERE YEAR(r.created_at) = 2024
GROUP BY propertyName
ORDER BY total_reviews desc
LIMIT 7;

+----------------+---------------+
| propertyName   | total_reviews |
+----------------+---------------+
| Summer Square  |             4 |
| Willow Creek   |             4 |
| Park Creek     |             4 |
| Autumn Square  |             4 |
| Royal Pointe   |             4 |
| Autumn Place   |             3 |
| Summer Estates |             3 |
+----------------+---------------+

-- Ej2) Obtener los ingresos por reservas de cada propiedad.
-- Esta consulta debe calcular los ingresos totales generados por cada propiedad.
-- Ayuda: hay un campo `price_per_night` en la tabla de `properties` donde los
-- ingresos totales se computan sumando la cantidad de noches reservadas para cada
-- reserva multiplicado por el precio por noche.

SELECT  p.name AS propertyName,
        sum((DATEDIFF(b.check_out, b.check_in)) * p.price_per_night) AS total
FROM properties AS p
INNER JOIN bookings AS b 
    ON p.id = b.property_id
GROUP BY propertyName;

+--------------------+--------------+
| propertyName       | total_nights |
+--------------------+--------------+
| Willow Estates     |      1792.00 |
| Park Court         |      3587.00 |
| Royal Gardens      |      4597.00 |
| Paradise Oaks      |      4820.00 |
| Royal Creek        |      1860.00 |
| Willow Gardens     |       504.00 |
| Summer Place       |       590.00 |
| Eagle Estates      |      7930.00 |
| Summer Village     |      1974.00 |
| University Oaks    |       765.00 |
| Park Pointe        |      1964.00 |
...

-- Ej3) Listar los principales usuarios según los pagos totales.
-- Esta consulta calcula los pagos totales realizados por cada usuario y enumera los
-- principales 10 usuarios según la suma de sus pagos.

SELECT u.name AS User, SUM(p.amount) AS total_spent
FROM users AS u
INNER JOIN payments AS p ON p.user_id = u.id
GROUP BY u.id
ORDER BY total_spent DESC
LIMIT 10;

+------------------------+-------------+
| User                   | total_spent |
+------------------------+-------------+
| Omer Williamson        |     9729.00 |
| Fr. Charlie Walsh      |     9466.00 |
| Marjory Fadel II       |     8751.00 |
| Fredric Kiehn          |     8016.00 |
| Mr. Jarrod Oberbrunner |     7552.00 |
| Dr. Reba Glover        |     7524.00 |
| Fr. Shauna Mills       |     7516.00 |
| Annamaria Lubowitz DDS |     7063.00 |
| Rep. Tonita McGlynn    |     7055.00 |
| Ricky Konopelski       |     7050.00 |
+------------------------+-------------+

-- CREATE TRIGGER trigger_name trigger_time trigger_event 
-- ON table_name FOR EACH ROW
-- BEGIN
--      [trigger_order]
--      trigger_body 
-- END;

-- trigger_time: {BEFORE | AFTER} 
-- trigger_event: {INSERT | UPDATE | DELETE}
-- trigger_order: {FOLLOWS| PRECEDES} other_trigger_name 

-- cliente renta y se agrega una fila a rental (tenemos inventory_id)
-- tenemos la info del cliente, en particular address_id con eso obtenemos el store_id 
-- podemos actualizar el stock 

-- Ej4) Crear un trigger notify_host_after_booking que notifica al anfitrión sobre una nueva
-- reserva. Es decir, cuando se realiza una reserva, notifique al anfitrión de la propiedad
-- mediante un mensaje.

DELIMITER //

CREATE TRIGGER notify_host_after_booking after INSERT
ON bookings FOR EACH ROW
BEGIN 
    DECLARE ownerID INT;

    -- get the owner id 
    SELECT p.owner_id INTO ownerID 
    FROM properties AS p
    WHERE NEW.property_id = p.id;

    -- insert new message
    INSERT INTO messages (sender_id, receiver_id, property_id, content) 
    VALUES (NEW.user_id, ownerID, NEW.property_id, 'Hola Mundo!');
END //

DELIMITER;

INSERT INTO bookings (property_id, user_id, check_in, check_out, total_price, status)
VALUES (1607, 1770, NOW(), NOW(), 10, 'God');

SELECT content
FROM messages
WHERE property_id = 1607 AND sender_id = 1770;

+-------------+
| content     |
+-------------+
| Hola Mundo! |
+-------------+

-- Ej5) Crear un procedimiento add_new_booking para agregar una nueva reserva.
-- Este procedimiento agrega una nueva reserva para un usuario, según el ID de la
-- propiedad, el ID del usuario y las fechas de entrada y salida. Verifica si la prop
-- piedad está disponible durante las fechas especificadas antes de insertar la reserva

DELIMITER //

CREATE PROCEDURE add_new_booking(
    IN propertyId INT, 
    IN userId INT,
    IN checkIn DATETIME,
    IN checkOut DATETIME)

BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM bookings as b
        WHERE   b.property_id = propertyId AND 
                (b.check_out <= checkIn OR checkOut <= b.check_in)   
    ) THEN
        INSERT INTO bookings (property_id, user_id, check_in, check_out, total_price, status)
        VALUES (propertyId, userId, checkIn, checkOut, 15000, 'Reserved');
    END IF; 
END //

call add_new_boOking(1607,1770,NOW(), NOW());
Query OK, 0 rows affected (0.01 sec)

SELECT status FROM bookings WHERE property_id = 1607 AND user_id = 1770;
+--------+
| status |
+--------+
| God    |
+--------+
-- No se pudo crear

 CALL add_new_booking(
         1600,                 
         1700,                 
         '2020-10-01 14:00:00',
         '2020-10-05 11:00:00' 
    );
Query OK, 0 rows affected (0.00 sec)

-- Ej6) Crear el rol `admin` y asignarle permisos de creación sobre la tabla `properties` y
-- permiso de actualización sobre la columna `status` de la tabla
-- `property_availability` .

create role admin;

grant insert on properties to admin;
grant update(status) on property_availability to admin;

-- Ej7) Si ejecuto esta consulta:

START TRANSACTION;
UPDATE reviews
SET comment = 'bad'
WHERE rating = 1;
COMMIT;

-- Se va a asignar como comentario "bad" a todos los reviews con rating=1.
-- ¿Por qué esto no contradice la propiedad de Durabilidad de ACID en las transacciones,
-- ya que modifico los datos contenidos en la tabla reviews, cuando ya fueron cargados al
-- comienzo del parcial?













